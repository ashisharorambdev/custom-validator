{"ast":null,"code":"/** @format */\n\nimport { validateEmail, validatePassword, validatePhone } from \"./utils/validation\";\n\n// export default function validate(values) {\n//   let errors = {};\n//   if (!values.email) {\n//     errors.email = \"Email address is required\";\n//   } else if (!/\\S+@\\S+\\.\\S+/.test(values.email)) {\n//     errors.email = \"Email address is invalid\";\n//   }\n//   if (!values.password) {\n//     errors.password = \"Password is required\";\n//   } else if (values.password.length < 8) {\n//     errors.password = \"Password must be 8 or more characters\";\n//   }\n//   return errors;\n// }\n\nexport function validateValue(value, name, rule) {\n  let errors = \"\";\n  if (rule.required === true) {\n    if (value.length === 0) errors = \"This is a is required field\";\n  } else {\n    switch (rule.type) {\n      case \"email\":\n        {\n          if (!validateEmail(value) && value.length !== 0) {\n            errors = \"Email address is invalid\";\n          }\n          break;\n        }\n      case \"password\":\n        {\n          if (!validatePassword(value) && value.length !== 0) {\n            errors = \"Password must be 8 or more characters\";\n          }\n          break;\n        }\n      case \"phoneNumber\":\n        {\n          if (!validatePhone(value) && value.length !== 0) {\n            errors = \"Phone number is invalid\";\n          }\n          break;\n        }\n      default:\n        {\n          errors = \"\";\n        }\n    }\n  }\n  return errors;\n}","map":{"version":3,"names":["validateEmail","validatePassword","validatePhone","validateValue","value","name","rule","errors","required","length","type"],"sources":["/home/mindbowser/Projects/Personal Projects/custom-validator/src/LoginFormValidationRules.js"],"sourcesContent":["/** @format */\n\nimport {\n  validateEmail,\n  validatePassword,\n  validatePhone,\n} from \"./utils/validation\";\n\n// export default function validate(values) {\n//   let errors = {};\n//   if (!values.email) {\n//     errors.email = \"Email address is required\";\n//   } else if (!/\\S+@\\S+\\.\\S+/.test(values.email)) {\n//     errors.email = \"Email address is invalid\";\n//   }\n//   if (!values.password) {\n//     errors.password = \"Password is required\";\n//   } else if (values.password.length < 8) {\n//     errors.password = \"Password must be 8 or more characters\";\n//   }\n//   return errors;\n// }\n\nexport function validateValue(value, name, rule) {\n  let errors = \"\";\n\n  if (rule.required === true) {\n    if (value.length === 0) errors = \"This is a is required field\";\n  } else {\n    switch (rule.type) {\n      case \"email\": {\n        if (!validateEmail(value) && value.length !== 0) {\n          errors = \"Email address is invalid\";\n        }\n        break;\n      }\n      case \"password\": {\n        if (!validatePassword(value) && value.length !== 0) {\n          errors = \"Password must be 8 or more characters\";\n        }\n        break;\n      }\n      case \"phoneNumber\": {\n        if (!validatePhone(value) && value.length !== 0) {\n          errors = \"Phone number is invalid\";\n        }\n        break;\n      }\n      default: {\n        errors = \"\";\n      }\n    }\n  }\n  return errors;\n}\n"],"mappings":"AAAA;;AAEA,SACEA,aAAa,EACbC,gBAAgB,EAChBC,aAAa,QACR,oBAAoB;;AAE3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,aAAa,CAACC,KAAK,EAAEC,IAAI,EAAEC,IAAI,EAAE;EAC/C,IAAIC,MAAM,GAAG,EAAE;EAEf,IAAID,IAAI,CAACE,QAAQ,KAAK,IAAI,EAAE;IAC1B,IAAIJ,KAAK,CAACK,MAAM,KAAK,CAAC,EAAEF,MAAM,GAAG,6BAA6B;EAChE,CAAC,MAAM;IACL,QAAQD,IAAI,CAACI,IAAI;MACf,KAAK,OAAO;QAAE;UACZ,IAAI,CAACV,aAAa,CAACI,KAAK,CAAC,IAAIA,KAAK,CAACK,MAAM,KAAK,CAAC,EAAE;YAC/CF,MAAM,GAAG,0BAA0B;UACrC;UACA;QACF;MACA,KAAK,UAAU;QAAE;UACf,IAAI,CAACN,gBAAgB,CAACG,KAAK,CAAC,IAAIA,KAAK,CAACK,MAAM,KAAK,CAAC,EAAE;YAClDF,MAAM,GAAG,uCAAuC;UAClD;UACA;QACF;MACA,KAAK,aAAa;QAAE;UAClB,IAAI,CAACL,aAAa,CAACE,KAAK,CAAC,IAAIA,KAAK,CAACK,MAAM,KAAK,CAAC,EAAE;YAC/CF,MAAM,GAAG,yBAAyB;UACpC;UACA;QACF;MACA;QAAS;UACPA,MAAM,GAAG,EAAE;QACb;IAAC;EAEL;EACA,OAAOA,MAAM;AACf"},"metadata":{},"sourceType":"module","externalDependencies":[]}